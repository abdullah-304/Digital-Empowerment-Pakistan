package com.home;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import javax.swing.*;
import java.util.ArrayList;

public class User {
    private int id;
    private String name;
    private int price;
    public User(int id, String name, int price) {
        this.id = id;
        this.name = name;
        this.price = price;
    }
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public int getPrice() {
        return price;
    }
    public void setPrice(int price) {
        this.price = price;
    }
    @Override
    public String toString() {
        return " ID - " + id + " , "+" NAME - " + name + " , "+" PRICE - " + price;
    }}
public class Com_Home extends JFrame {
    
    private ArrayList<User> productList = new ArrayList<>();
    private DefaultListModel<String> listModel = new DefaultListModel<>();
    private JList<String> productListDisplay = new JList<>(listModel);
    private JTextField idField, nameField, priceField;

    public Com_Home() {
        setTitle("Simple CRUD Application");
        setSize(600, 700);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Form Panel for User Input
        JPanel formPanel = new JPanel(new GridLayout(4, 2));
        formPanel.setBackground(new Color(0, 153, 153));

        formPanel.add(new JLabel(" Product ID:"));
        idField = new JTextField();
        formPanel.add(idField);
        idField.setBackground(new Color(0, 153, 153));

        formPanel.add(new JLabel(" Product Name:"));
        nameField = new JTextField();
        formPanel.add(nameField);
        nameField.setBackground(new Color(0, 153, 153));

        formPanel.add(new JLabel(" Product Price:"));
        priceField = new JTextField();
        formPanel.add(priceField);
        priceField.setBackground(new Color(0, 153, 153));

        JButton createButton = new JButton("CREATE");
        formPanel.add(createButton);
        JButton updateButton = new JButton("UPDATE");
        formPanel.add(updateButton);

        JPanel productListPanel = new JPanel(new BorderLayout());
        productListPanel.add(new JLabel(" PRODUCT LIST:"), BorderLayout.NORTH);
        productListPanel.add(new JScrollPane(productListDisplay), BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel(new GridLayout(1, 2));
        JButton deleteButton = new JButton("DELETE");
        buttonPanel.add(deleteButton);
        JButton readButton = new JButton("READ");
        buttonPanel.add(readButton);
        
        createButton.setBackground(Color.GREEN);
        readButton.setBackground(Color.CYAN);
        updateButton.setBackground(Color.ORANGE);
        deleteButton.setBackground(Color.RED);
        
        add(formPanel, BorderLayout.NORTH);
        add(productListPanel, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);
        
        createButton.addActionListener(e -> createUser());
        updateButton.addActionListener(e -> updateUser());
        deleteButton.addActionListener(e -> deleteUser());
        readButton.addActionListener(e -> readUser());

        setVisible(true);
    }
    private void createUser() {
        try {
            int id = Integer.parseInt(idField.getText());
            String name = nameField.getText();
            int price = Integer.parseInt(priceField.getText());
            
            User user = new User(id, name, price);
            productList.add(user);
            listModel.addElement(user.toString());
            clearFields();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Enter Correct Credentials");
        }
    }
    private void updateUser() {
        int selectedIndex = productListDisplay.getSelectedIndex();
        if (selectedIndex != -1) {
            try {
                int id = Integer.parseInt(idField.getText());
                String name = nameField.getText();
                int price = Integer.parseInt(priceField.getText());
                
                User user = productList.get(selectedIndex);
                user.setId(id);
                user.setName(name);
                user.setPrice(price);
                listModel.set(selectedIndex, user.toString());
                clearFields();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Enter New Credentials");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select a user to update.");
        }
    }
    private void deleteUser() {
        int selectedIndex = productListDisplay.getSelectedIndex();
        if (selectedIndex != -1) {
            productList.remove(selectedIndex);
            listModel.remove(selectedIndex);
            JOptionPane.showMessageDialog(this, "User Deleted.");
        } else {
            JOptionPane.showMessageDialog(this, "Select a user to delete.");
        }
    }
    private void readUser() {
        int selectedIndex = productListDisplay.getSelectedIndex();
        if (selectedIndex != -1) {
            User user = productList.get(selectedIndex);
            idField.setText(String.valueOf(user.getId()));
            nameField.setText(user.getName());
            priceField.setText(String.valueOf(user.getId()));
        } else {
            JOptionPane.showMessageDialog(this, "Select a user to read.");
        }
 }
    private void clearFields() {
        idField.setText("");
        nameField.setText("");
        priceField.setText("");
    }
     public static void main(String[] args){
        Com_Home ob = new Com_Home();
    }}
